# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define the service for the JOBS to be used

services:
  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: test
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  gateway:
    docker:
      - image: circleci/node:16
    working_directory: ~/repo
    steps:
      - checkout
      - run: ls -l
      - run: cd gateway
      - run: cd gateway && npm install
      - run: cd gateway && npm test
      - setup_remote_docker
      - run: 
         # installs a docker client that will be used to run the docker commands
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo chmod +x /usr/local/bin/docker-compose
            mv /tmp/docker/* /usr/bin
      - run:
            # Builds a docker image to push to Docker Hub
            # Tag (-t) pattern is below, where CircleCI 
            # to get the Dockerfile from the current directory.
            # <docker_hub_username/docker-hub-password:version>.
          name: Build Docker image
          command: docker build -t yahiafellah/circleci-repos:v1 .
      - run:
          # Pushes the Docker image you created to the Docker Hub.
          # Replace khabdrick/circleci-tutorial:v1 with the 
          # <docker_hub_username/docker-hub-password:version> you used to build the image above
          name: Push to Docker Hub
          command: |
            docker login -u yahiafellah -p _S!-LqkkWCtu9ry
            docker push yahiafellah/circleci-repos:v1
  users:
    docker:
      - image: circleci/node:16
      - image: circleci/mongo:latest
    working_directory: ~/repo
    environment:
      mongoDbUrl: mongodb://localhost:27017/test
    steps:
      - setup_remote_docker
      - run:
          name: Waiting for Mongo
          command: dockerize -wait tcp://localhost:27017 -timeout 1m
      # - run:
      #     name: Install mongo client
      #     command: |
      #       sudo apt-get install -y mongodb
      - checkout
      - when:
          condition:
            equal: [ main, user-service-v1 ]
          steps:
            - run: echo "I am on main"
      - run:
          name: Install Dependencies
          command: |
            cd users
            npm install
      # - run:
      #     name: Wait for MongoDB to start
      #     command: |
      #       cd users
      #       npm run wait-for-mongo
      - run:
          name: Wait for MongoDB to start
          command: dockerize -wait tcp://localhost:27017 -timeout 1m
      - run:
          name: Run tests
          command: |
            cd users
            npm test
  flow:
    docker:
      - image: circleci/node:16
      - image: circleci/mongo:latest
    working_directory: ~/repo
    environment:
      mongoDbUrl: mongodb://localhost:27017/test
    steps:
      - setup_remote_docker
      - run:
          name: Waiting for Mongo
          command: dockerize -wait tcp://localhost:27017 -timeout 1m
      # - run:
      #     name: Install mongo client
      #     command: |
      #       sudo apt-get install -y mongodb
      - checkout
      - when:
          condition:
            equal: [ main, flow-service-v1 ]
          steps:
            - run: echo "I am on main"
      - run:
          name: Install Dependencies
          command: |
            cd flow
            npm install
      # - run:
      #     name: Wait for MongoDB to start
      #     command: |
      #       cd users
      #       npm run wait-for-mongo
      - run:
          name: Wait for MongoDB to start
          command: dockerize -wait tcp://localhost:27017 -timeout 1m
      - run:
          name: Run tests
          command: |
            cd flow
            npm test

  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
      - gateway
      - users
      - flow